package com.example.fortuna_android.ui

import android.widget.LinearLayout
import android.widget.TextView
import androidx.test.core.app.ApplicationProvider
import com.example.fortuna_android.R
import com.example.fortuna_android.api.ElementPillar
import com.example.fortuna_android.api.StemBranchDetail
import org.junit.Assert.*
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.robolectric.RobolectricTestRunner
import org.robolectric.annotation.Config

/**
 * Unit tests for TodaySajuPaljaView
 * Tests today's Saju Palja display functionality with 100% coverage
 */
@RunWith(RobolectricTestRunner::class)
@Config(sdk = [28])
class TodaySajuPaljaViewTest {

    private lateinit var todaySajuPaljaView: TodaySajuPaljaView

    @Before
    fun setUp() {
        todaySajuPaljaView = TodaySajuPaljaView(ApplicationProvider.getApplicationContext())
    }

    // ========== Constructor Tests ==========

    @Test
    fun `test view is created successfully`() {
        assertNotNull("TodaySajuPaljaView should be created", todaySajuPaljaView)
        assertTrue("Should be instance of LinearLayout", todaySajuPaljaView is LinearLayout)
    }

    // ========== setTitle Tests ==========

    @Test
    fun `test setTitle updates title text`() {
        // Arrange
        val testTitle = "Ïò§ÎäòÏùò Ïö¥ÏÑ∏"

        // Act
        todaySajuPaljaView.setTitle(testTitle)

        // Assert
        val titleView = todaySajuPaljaView.findViewById<TextView>(R.id.today_saju_title)
        assertEquals("Title should be updated", testTitle, titleView.text.toString())
    }

    @Test
    fun `test setTitle with empty string`() {
        // Act
        todaySajuPaljaView.setTitle("")

        // Assert
        val titleView = todaySajuPaljaView.findViewById<TextView>(R.id.today_saju_title)
        assertEquals("Title should be empty", "", titleView.text.toString())
    }

    @Test
    fun `test setTitle with special characters`() {
        // Arrange
        val specialTitle = "Ïò§ÎäòÏùò Ïö¥ÏÑ∏ üåü‚ú®"

        // Act
        todaySajuPaljaView.setTitle(specialTitle)

        // Assert
        val titleView = todaySajuPaljaView.findViewById<TextView>(R.id.today_saju_title)
        assertEquals("Title should handle special chars", specialTitle, titleView.text.toString())
    }

    // ========== Helper Methods ==========

    private fun createMockElementPillar(stemName: String, stemElement: String, branchName: String, branchElement: String): ElementPillar {
        val stem = StemBranchDetail(
            koreanName = stemName,
            element = stemElement,
            elementColor = "#0BEFA0",
            yinYang = "yang"
        )
        val branch = StemBranchDetail(
            koreanName = branchName,
            element = branchElement,
            elementColor = "#F93E3E",
            yinYang = "yin",
            animal = "Rat"
        )
        return ElementPillar(
            stem = stem,
            branch = branch,
            twoLetters = stemName + branchName
        )
    }

    // ========== setTodaySajuData Tests ==========

    @Test
    fun `test setTodaySajuData with daeun only`() {
        // Arrange
        val daeun = createMockElementPillar("Í∞ë", "Êú®", "Ïûê", "Ê∞¥")

        // Act
        todaySajuPaljaView.setTodaySajuData(daeun, null, null, null)

        // Assert
        val daeunStem = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_stem)
        val daeunBranch = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_branch)
        assertEquals("Daeun stem should be set", "Í∞ë", daeunStem.text.toString())
        assertEquals("Daeun branch should be set", "Ïûê", daeunBranch.text.toString())
    }

    @Test
    fun `test setTodaySajuData with all four un`() {
        // Arrange
        val daeun = createMockElementPillar("Í∞ë", "Êú®", "Ïûê", "Ê∞¥")
        val saeun = createMockElementPillar("ÏùÑ", "Êú®", "Ï∂ï", "Âúü")
        val wolun = createMockElementPillar("Î≥ë", "ÁÅ´", "Ïù∏", "Êú®")
        val ilun = createMockElementPillar("Ï†ï", "ÁÅ´", "Î¨ò", "Êú®")

        // Act
        todaySajuPaljaView.setTodaySajuData(daeun, saeun, wolun, ilun)

        // Assert - Daeun
        val daeunStem = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_stem)
        val daeunBranch = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_branch)
        assertEquals("Daeun stem", "Í∞ë", daeunStem.text.toString())
        assertEquals("Daeun branch", "Ïûê", daeunBranch.text.toString())

        // Assert - Saeun
        val saeunStem = todaySajuPaljaView.findViewById<TextView>(R.id.saeun_stem)
        val saeunBranch = todaySajuPaljaView.findViewById<TextView>(R.id.saeun_branch)
        assertEquals("Saeun stem", "ÏùÑ", saeunStem.text.toString())
        assertEquals("Saeun branch", "Ï∂ï", saeunBranch.text.toString())

        // Assert - Wolun
        val wolunStem = todaySajuPaljaView.findViewById<TextView>(R.id.wolun_stem)
        val wolunBranch = todaySajuPaljaView.findViewById<TextView>(R.id.wolun_branch)
        assertEquals("Wolun stem", "Î≥ë", wolunStem.text.toString())
        assertEquals("Wolun branch", "Ïù∏", wolunBranch.text.toString())

        // Assert - Ilun
        val ilunStem = todaySajuPaljaView.findViewById<TextView>(R.id.ilun_stem)
        val ilunBranch = todaySajuPaljaView.findViewById<TextView>(R.id.ilun_branch)
        assertEquals("Ilun stem", "Ï†ï", ilunStem.text.toString())
        assertEquals("Ilun branch", "Î¨ò", ilunBranch.text.toString())
    }

    @Test
    fun `test setTodaySajuData with null values`() {
        // Act - Should not crash with null values
        todaySajuPaljaView.setTodaySajuData(null, null, null, null)

        // Assert
        assertNotNull("View should not be null", todaySajuPaljaView)
    }

    @Test
    fun `test setTodaySajuData with saeun only`() {
        // Arrange
        val saeun = createMockElementPillar("ÏùÑ", "Êú®", "Ï∂ï", "Âúü")

        // Act
        todaySajuPaljaView.setTodaySajuData(null, saeun, null, null)

        // Assert
        val saeunStem = todaySajuPaljaView.findViewById<TextView>(R.id.saeun_stem)
        val saeunBranch = todaySajuPaljaView.findViewById<TextView>(R.id.saeun_branch)
        assertEquals("Saeun stem should be set", "ÏùÑ", saeunStem.text.toString())
        assertEquals("Saeun branch should be set", "Ï∂ï", saeunBranch.text.toString())
    }

    @Test
    fun `test setTodaySajuData with wolun only`() {
        // Arrange
        val wolun = createMockElementPillar("Î≥ë", "Fire", "Ïù∏", "Wood")

        // Act
        todaySajuPaljaView.setTodaySajuData(null, null, wolun, null)

        // Assert
        val wolunStem = todaySajuPaljaView.findViewById<TextView>(R.id.wolun_stem)
        val wolunBranch = todaySajuPaljaView.findViewById<TextView>(R.id.wolun_branch)
        assertEquals("Wolun stem should be set", "Î≥ë", wolunStem.text.toString())
        assertEquals("Wolun branch should be set", "Ïù∏", wolunBranch.text.toString())
    }

    @Test
    fun `test setTodaySajuData with ilun only`() {
        // Arrange
        val ilun = createMockElementPillar("Ï†ï", "Fire", "Î¨ò", "Wood")

        // Act
        todaySajuPaljaView.setTodaySajuData(null, null, null, ilun)

        // Assert
        val ilunStem = todaySajuPaljaView.findViewById<TextView>(R.id.ilun_stem)
        val ilunBranch = todaySajuPaljaView.findViewById<TextView>(R.id.ilun_branch)
        assertEquals("Ilun stem should be set", "Ï†ï", ilunStem.text.toString())
        assertEquals("Ilun branch should be set", "Î¨ò", ilunBranch.text.toString())
    }

    // ========== Element Info Tests ==========

    @Test
    fun `test element info for wood in Korean`() {
        // Arrange
        val pillar = createMockElementPillar("Í∞ë", "Î™©", "Ïù∏", "Î™©")

        // Act
        todaySajuPaljaView.setTodaySajuData(pillar, null, null, null)

        // Assert
        val stemElement = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_stem_element)
        val branchElement = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_branch_element)
        assertEquals("Î™© should be Wood", "Êú®, ÎÇòÎ¨¥", stemElement.text.toString())
        assertEquals("Î™© should be Wood", "Êú®, ÎÇòÎ¨¥", branchElement.text.toString())
    }

    @Test
    fun `test element info for wood in English`() {
        // Arrange
        val pillar = createMockElementPillar("Í∞ë", "Wood", "Ïù∏", "WOOD")

        // Act
        todaySajuPaljaView.setTodaySajuData(pillar, null, null, null)

        // Assert
        val stemElement = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_stem_element)
        val branchElement = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_branch_element)
        assertEquals("Wood should map correctly", "Êú®, ÎÇòÎ¨¥", stemElement.text.toString())
        assertEquals("WOOD (uppercase) should map correctly", "Êú®, ÎÇòÎ¨¥", branchElement.text.toString())
    }

    @Test
    fun `test element info for fire`() {
        // Arrange
        val pillar = createMockElementPillar("Î≥ë", "Fire", "Ïò§", "Ìôî")

        // Act
        todaySajuPaljaView.setTodaySajuData(pillar, null, null, null)

        // Assert
        val stemElement = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_stem_element)
        val branchElement = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_branch_element)
        assertEquals("Fire should be ÁÅ´", "ÁÅ´, Î∂à", stemElement.text.toString())
        assertEquals("Ìôî should be ÁÅ´", "ÁÅ´, Î∂à", branchElement.text.toString())
    }

    @Test
    fun `test element info for earth`() {
        // Arrange
        val pillar = createMockElementPillar("Î¨¥", "Earth", "ÏßÑ", "ÌÜ†")

        // Act
        todaySajuPaljaView.setTodaySajuData(pillar, null, null, null)

        // Assert
        val stemElement = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_stem_element)
        val branchElement = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_branch_element)
        assertEquals("Earth should be Âúü", "Âúü, Ìùô", stemElement.text.toString())
        assertEquals("ÌÜ† should be Âúü", "Âúü, Ìùô", branchElement.text.toString())
    }

    @Test
    fun `test element info for metal`() {
        // Arrange
        val pillar = createMockElementPillar("Í≤Ω", "Metal", "Ïú†", "Í∏à")

        // Act
        todaySajuPaljaView.setTodaySajuData(pillar, null, null, null)

        // Assert
        val stemElement = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_stem_element)
        val branchElement = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_branch_element)
        assertEquals("Metal should be Èáë", "Èáë, Ïá†", stemElement.text.toString())
        assertEquals("Í∏à should be Èáë", "Èáë, Ïá†", branchElement.text.toString())
    }

    @Test
    fun `test element info for water`() {
        // Arrange
        val pillar = createMockElementPillar("ÏûÑ", "Water", "Ïûê", "Ïàò")

        // Act
        todaySajuPaljaView.setTodaySajuData(pillar, null, null, null)

        // Assert
        val stemElement = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_stem_element)
        val branchElement = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_branch_element)
        assertEquals("Water should be Ê∞¥", "Ê∞¥, Î¨º", stemElement.text.toString())
        assertEquals("Ïàò should be Ê∞¥", "Ê∞¥, Î¨º", branchElement.text.toString())
    }

    @Test
    fun `test element info for unknown element`() {
        // Arrange
        val pillar = createMockElementPillar("Í∞ë", "Unknown", "Ïûê", "???")

        // Act
        todaySajuPaljaView.setTodaySajuData(pillar, null, null, null)

        // Assert
        val stemElement = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_stem_element)
        val branchElement = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_branch_element)
        assertEquals("Unknown should return default", "?, ?", stemElement.text.toString())
        assertEquals("??? should return default", "?, ?", branchElement.text.toString())
    }

    // ========== Multiple Calls Tests ==========

    @Test
    fun `test setTodaySajuData can be called multiple times`() {
        // Arrange
        val pillar1 = createMockElementPillar("Í∞ë", "Êú®", "Ïûê", "Ê∞¥")
        val pillar2 = createMockElementPillar("ÏùÑ", "Êú®", "Ï∂ï", "Âúü")

        // Act
        todaySajuPaljaView.setTodaySajuData(pillar1, null, null, null)
        todaySajuPaljaView.setTodaySajuData(pillar2, null, null, null)

        // Assert - Should have second pillar values
        val daeunStem = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_stem)
        val daeunBranch = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_branch)
        assertEquals("Should have second pillar stem", "ÏùÑ", daeunStem.text.toString())
        assertEquals("Should have second pillar branch", "Ï∂ï", daeunBranch.text.toString())
    }

    @Test
    fun `test setTitle and setTodaySajuData work together`() {
        // Arrange
        val testTitle = "ÌÖåÏä§Ìä∏ ÌÉÄÏù¥ÌãÄ"
        val pillar = createMockElementPillar("Í∞ë", "Êú®", "Ïûê", "Ê∞¥")

        // Act
        todaySajuPaljaView.setTitle(testTitle)
        todaySajuPaljaView.setTodaySajuData(pillar, null, null, null)

        // Assert - Both should be set
        val titleView = todaySajuPaljaView.findViewById<TextView>(R.id.today_saju_title)
        val daeunStem = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_stem)
        assertEquals("Title should be set", testTitle, titleView.text.toString())
        assertEquals("Daeun should be set", "Í∞ë", daeunStem.text.toString())
    }

    @Test
    fun `test view maintains state after multiple operations`() {
        // Arrange
        val daeun = createMockElementPillar("Í∞ë", "Wood", "Ïûê", "Water")
        val saeun = createMockElementPillar("ÏùÑ", "Wood", "Ï∂ï", "Earth")

        // Act
        todaySajuPaljaView.setTitle("Initial Title")
        todaySajuPaljaView.setTodaySajuData(daeun, saeun, null, null)
        todaySajuPaljaView.setTitle("Updated Title")

        // Assert - All data should be maintained
        val titleView = todaySajuPaljaView.findViewById<TextView>(R.id.today_saju_title)
        val daeunStem = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_stem)
        val saeunStem = todaySajuPaljaView.findViewById<TextView>(R.id.saeun_stem)

        assertEquals("Title should be updated", "Updated Title", titleView.text.toString())
        assertEquals("Daeun should still be set", "Í∞ë", daeunStem.text.toString())
        assertEquals("Saeun should still be set", "ÏùÑ", saeunStem.text.toString())
    }

    @Test
    fun `test all element types with mixed case`() {
        // Arrange - Test case insensitivity
        val daeun = createMockElementPillar("Í∞ë", "WoOd", "Ïûê", "WATER")
        val saeun = createMockElementPillar("Î≥ë", "FiRe", "Ïò§", "Ìôî")
        val wolun = createMockElementPillar("Î¨¥", "eArTh", "ÏßÑ", "ÌÜ†")
        val ilun = createMockElementPillar("Í≤Ω", "MeTaL", "Ïú†", "Í∏à")

        // Act
        todaySajuPaljaView.setTodaySajuData(daeun, saeun, wolun, ilun)

        // Assert - All should be parsed correctly despite mixed case
        val daeunStemElement = todaySajuPaljaView.findViewById<TextView>(R.id.daeun_stem_element)
        val saeunStemElement = todaySajuPaljaView.findViewById<TextView>(R.id.saeun_stem_element)
        val wolunStemElement = todaySajuPaljaView.findViewById<TextView>(R.id.wolun_stem_element)
        val ilunStemElement = todaySajuPaljaView.findViewById<TextView>(R.id.ilun_stem_element)

        assertEquals("Mixed case Wood should work", "Êú®, ÎÇòÎ¨¥", daeunStemElement.text.toString())
        assertEquals("Mixed case Fire should work", "ÁÅ´, Î∂à", saeunStemElement.text.toString())
        assertEquals("Mixed case Earth should work", "Âúü, Ìùô", wolunStemElement.text.toString())
        assertEquals("Mixed case Metal should work", "Èáë, Ïá†", ilunStemElement.text.toString())
    }
}
