[project]
name = "fortuna_api"
version = "0.1.0"
description = "Fortuna API - Django REST API with JWT authentication and Google OAuth"
authors = [
    {name = "강지혁",email = "wlgur7238@snu.ac.kr"}
]
readme = "README.md"
requires-python = ">=3.12,<4.0"
dependencies = [
    # Core Django
    "django>=5.2.6,<6.0.0",
    "djangorestframework>=3.16.1,<4.0.0",

    # Authentication & Authorization
    "django-allauth>=64.2.1,<65.0.0",
    "dj-rest-auth>=6.0.0,<7.0.0",
    "djangorestframework-simplejwt>=5.3.0,<6.0.0",

    # Database
    "psycopg2-binary>=2.9.9,<3.0.0",

    # Environment & Configuration
    "python-decouple>=3.8,<4.0",


    # CORS & Security
    "django-cors-headers>=4.3.1,<5.0.0",

    # Development & Utilities
    "django-extensions>=3.2.3,<4.0.0",
    "pillow>=10.1.0,<11.0.0",

    # API Documentation
    "drf-spectacular>=0.27.0,<1.0.0",

    # AI Integration
    "ai-sdk-python>=0.1.0",
    "django-dotenv (>=1.4.2,<2.0.0)",
    "pytest (>=8.4.2,<9.0.0)",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0,<9.0.0",
    "pytest-django>=4.8.0,<5.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "factory-boy>=3.3.0,<4.0.0",

    # Code Quality
    "black>=24.0.0,<25.0.0",
    "ruff>=0.6.0,<1.0.0",
    "mypy>=1.8.0,<2.0.0",
    "django-stubs>=4.2.7,<5.0.0",
    "djangorestframework-stubs>=3.14.5,<4.0.0",

    # Development Tools
    "django-debug-toolbar>=4.2.0,<5.0.0",
    "ipython>=8.18.0,<9.0.0",
    "pre-commit>=3.6.0,<4.0.0",
]

production = [
    # Production Server
    "gunicorn>=21.2.0,<22.0.0",

    # Monitoring & Logging
    "sentry-sdk>=1.39.0,<2.0.0",

    # Caching
    "django-redis>=5.4.0,<6.0.0",
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

# ====================
# Code Quality Configuration
# ====================

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",     # pycodestyle errors
    "E7",
    "E9",
    "F",      # Pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "S",      # flake8-bandit
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "DJ",     # flake8-django
    "EM",     # flake8-errmsg
    "EXE",    # flake8-executable
    "FA",     # flake8-future-annotations
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "INT",    # flake8-gettext
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "TD",     # flake8-todos
    "FIX",    # flake8-fixme
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PL",     # Pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "NPY",    # NumPy-specific rules
    "PERF",   # Perflint
    "FURB",   # refurb
    "LOG",    # flake8-logging
    "RUF",    # Ruff-specific rules
]

ignore = [
    # Django-specific ignores
    "DJ001",  # Avoid using `null=True` on string-based fields
    "DJ008",  # Model's `__str__` method should return a string
    
    # Security ignores (be careful with these)
    "S101",   # Use of assert detected
    "S311",   # Standard pseudo-random generators are not suitable for security/cryptographic purposes
    
    # Code style ignores
    "COM812", # missing-trailing-comma (conflicts with formatter)
    "ISC001", # single-line-implicit-string-concatenation (conflicts with formatter)
    
    # Documentation ignores
    "TD002",  # Missing author in TODO
    "TD003",  # Missing issue link on the line following this TODO
    "FIX002", # Line contains TODO, consider resolving the issue
    
    # Type checking ignores
    "TCH001", # Move application import into a type-checking block
    "TCH002", # Move third-party import into a type-checking block
    "TCH003", # Move standard library import into a type-checking block
    
    # Pylint ignores
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    
    # Performance ignores that may be too strict
    "PERF203", # `try`-`except` within a loop incurs performance overhead
    
    # Complexity ignores
    "C901",   # too complex
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
# Django-specific isort configuration
known-first-party = ["fortuna_api", "core"]
known-django = ["django"]
section-order = ["future", "standard-library", "django", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and fixtures
"**/tests/**/*" = ["PLR2004", "S101", "ARG", "FBT"]
"**/test_*.py" = ["PLR2004", "S101", "ARG", "FBT"]
"conftest.py" = ["ARG"]

# Settings files can have unused imports and long lines
"**/settings/**/*" = ["F401", "E501"]

# Migration files are auto-generated
"**/migrations/**/*" = ["ALL"]

# Admin files can have long lines
"**/admin.py" = ["E501"]

# __init__.py files can have unused imports
"**/__init__.py" = ["F401"]
